#!/system/bin/sh
# handle_galaxyparts
# by psyke83

command=$(getprop persist.sys.galaxyparts)
setprop persist.sys.galaxyparts ""

if [ "$1" != "" ]; then
    # command from shell (debug)
    command=$1
fi

remount() {
mount -o remount,$1 /system
}

checkswap() {
isswapenabled=$(getprop persist.sys.swap)
ramzswapstatus=$(cat /proc/swaps | grep ramz)
zramstatus=$(cat /proc/swaps | grep zram)
swapstatus=$(cat /proc/swaps | grep mmcblk)
swappriority=$(getprop persist.sys.swap_pri)
swappriority_now=$(echo $swapstatus | awk '{ print $5; }')
if [ "$swappriority" = "" ]; then
    swappriority="0"
fi

if [ "$ramzswapstatus" != "" ] || [ "$zramstatus" != "" ]; then
    iscompcacheon=1
else
    iscompcacheon=0
fi

if [ "$swapstatus" != "" ]; then
    isswapon=1
else
    isswapon=0
fi
}

fakedt() {
model=$(getprop ro.product.model)
if [ "$model" != "GT-I5500" ]; then
    echo "Wrong model! Aborting fakedt."
    return
fi

dtstatus=$(getprop persist.sys.fakedt)
stpermissions="android.hardware.touchscreen.xml"
mtpermissions="android.hardware.touchscreen.multitouch.distinct.xml"

echo "Fake dual-touch status:" $dtstatus
echo $dtstatus > /sys/devices/virtual/touch/synaptics/fakedt

if [ "$dtstatus" = "1" ] && [ -f /system/etc/permissions/$stpermissions ]; then
    echo "Warning: fake dual-touch is enabled, but ST permissions file is present!"
    echo "Fixed. Permissions will take effect after reboot."
    remount rw
    rm /system/etc/permissions/$stpermissions
    cp /system/galaxyparts/etc/permissions/$mtpermissions /system/etc/permissions/
    chmod 644 /system/etc/permissions/$mtpermissions
    remount ro
fi

if [ "$dtstatus" != "1" ] && [ -f /system/etc/permissions/$mtpermissions ]; then
    echo "Warning: fake dual-touch is disabled, but MT permissions file is present!"
    echo "Fixed. Permissions will take effect after reboot."
    remount rw
    rm /system/etc/permissions/$mtpermissions
    cp /system/galaxyparts/etc/permissions/$stpermissions /system/etc/permissions/
    chmod 644 /system/etc/permissions/$stpermissions
    remount ro
fi
}

readahead() {
bootstatus=$(getprop sys.boot_completed)
sdreadahead=$(getprop persist.sys.read_ahead_kb)
speeds=(128 256 512 1024 2048 3072 4096)
newspeed=${speeds[$sdreadahead]}

# If Android is not fully booted, don't set the default
# read-ahead size (or it could interfere with user scripts)
if ([ "$bootstatus" != "1" ] || [ $command = "bootcheck" ]) && [ "$newspeed" = "128" ]; then
    echo "Warning: will not set default read-ahead buffer during boot"
else
    # Set SD read_ahead_kb
    echo "Setting new SD card read-ahead buffer: "$newspeed"KB"
    echo $newspeed > /sys/devices/virtual/bdi/179:0/read_ahead_kb
fi
}

swap() {
checkswap
# enable
if [ "$isswapenabled" = "1" ] && [ "$isswapon" = "0" ]; then
    echo "Enabling swap..."
    swapon -p $swappriority /dev/block/mmcblk0p3
fi

# disable
if [ "$isswapenabled" != "1" ] && [ "$isswapon" = "1" ]; then
    echo "Disabling swap..."
    swapoff /dev/block/mmcblk0p3
fi

# adjust priority (if needed)
if [ "$isswapon" = "1" ] && [ "$swappriority" != "$swappriority_now" ]; then
    echo "Re-initializing swap with new priority..."
    swapoff /dev/block/mmcblk0p3
    swapon -p $swappriority /dev/block/mmcblk0p3
fi
}

bootcheck() {
# ensure customizations are applied after Android boot completes
fakedt
swap
readahead
}

# run command
$command

